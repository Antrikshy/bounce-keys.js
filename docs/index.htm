<!DOCTYPE html>
<head>
  <script type="module">
    import { BounceKeys } from "../dist/esm/main.js";

    const textInput = document.getElementById("demo-input");
    const bounceWindow = document.getElementById("bounce-window");
    const bounceWindowIndicators = document.getElementsByClassName("bounce-window-value");

    function setWindow(windowSize) {
      Array.from(bounceWindowIndicators).forEach(indicator => indicator.textContent = windowSize);
      const bk = new BounceKeys({bounceWindow: windowSize, repeatOnly: true, shouldEmitBlockEvents: true});
      textInput.addEventListener("keydown", bk);
    }

    setWindow(500);
    bounceWindow.addEventListener("input", e => {
      const windowSize = e.target.value;
      setWindow(windowSize);
    });

    textInput.addEventListener("bounce-keys:blocked", e => {
      const logArea = document.querySelector("section.right");
      logArea.insertAdjacentHTML("beforeend", `<p>Blocked key code "${e.detail.code}"</p>`);
      logArea.scrollTo({ top: logArea.scrollHeight, behavior: "smooth" });
    });
  </script>
  <style>
    body {
      margin: 0 10%;
      font-size: 16px;
      font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
      background: linear-gradient(45deg, #cf3f49, #872271);
      color: white;
      > .demo {
        height: 100vh;
        display: grid;
        grid-template-columns: 1fr 1fr;
      }
    }
    section.left {
      display: flex;
      align-items: center;
      justify-content: center;
      & .input-container {
        width: 75%;
        text-align: center;
        & input#demo-input {
          height: 2.5rem;
          width: 100%;
          font-size: 2rem;
          text-align: center;
        }
        & input#bounce-window {
           width: 50%;
        }
      }
    }
    section.right {
      padding: 3rem 0;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      overflow-y: scroll;
    }
  </style>
</head>
<body>
  <div class="demo">
    <section class="left">
      <div class="input-container">
        <p>Use this box to test bounce-keys. Double-press keys to see block behavior.</p>
        <input type="text" id="demo-input"/>
        <br/><br/>
        <input type="range" min="0" max="1000" id="bounce-window"/>
        <br/>
        Window: <output class="bounce-window-value">500</output>ms
        <br/><br/>
        <p>bounce-keys initialized using these props for this demo:</p>
        <code>
          {
            bounceWindow: <output class="bounce-window-value">500</output>,
            repeatOnly: true,
            shouldEmitBlockEvents: true
          }
        </code>
      </div>
    </section>
    <section class="right">
    </section>
  </div>
</body>
